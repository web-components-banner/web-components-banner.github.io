//https://web-components-banner.github.io Web Component
!(function (
    t = {
        define: "web-components-banner",
        text1: "Web Components",
        text2: "Questions",
        text3: "<web-components-banner>",
        text4: "",
        text5: "Build Web Components, Learn Web Components",
        text6:
            "shadowDOM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Custom Elements&nbsp;&nbsp&nbsp;&nbsp;&nbsp;Templates",
        width: 35,
        height: 35,
        rod: 0,
        text1y: 20,
        text2y: 20,
        text3y: 33,
        text4y: 33,
        text5y: 7,
        text1size: 20,
        text2size: 20,
        text3size: 9,
        text4size: 9,
        text5size: 3.4,
        text6size: 3.4,
        text1fill: "#b8860b",
        text2fill: "#b8860b",
        text3fill: "#006400",
        text4fill: "#ff6400",
        text5fill: "#006400",
        text6fill: "#eeeeee",
        text1stroke: "#006400",
        text2stroke: "#006400",
        text1anchor: "start:1",
        text2anchor: "end:99",
        text3anchor: "start:1",
        text4anchor: "end:99",
        text5anchor: "start:24",
        text6anchor: "start:0",
    }
) {
    new URLSearchParams(
        location.search + "&" + document.currentScript.src.split("?")[1]
    ).forEach((e, s) => (t[s] = e)),
        customElements.define(
            t.define,
            class extends HTMLElement {
                static observedAttributes = Object.keys(t);
                attributeChangedCallback(e, s, r) {
                    this.to ? (this[e] = r) : (t[e] = r);
                }
                connectedCallback(
                    e = this.attachShadow({ mode: "open" }),
                    s = (
                        t = (
                            t,
                            e = "M0,25h275",
                            s = "text" + t,
                            r = this[s]
                                .replace(/</g, "&lt;")
                                .replace(/>/g, "&gt;")
                                .replace(/_/g, " "),
                            [i, o] = this[s + "anchor"].split(":")
                        ) =>
                            `<path part=${s}y fill=none id=${s} pathLength=100 d=${e} /><text part=${s}><textPath href=#${s} stroke-width=.5 font-size=${this[s + "size"]
                            } fill=${this[s + "fill"]} stroke=${this[s + "stroke"]
                            } startoffset=${o} text-anchor=${i}>` +
                            (2 == t && "Q" == this.text2[0] ? r.slice(1) : r) +
                            "</textPath></text>",
                        s = (t) => e.querySelector(`[part=${t}]`),
                        r = (t) => ~~s(t).getBBox().width
                    ) => {
                        (this.to = 0),
                            (e.innerHTML =
                                "<style>:host{display:inline-block;width:100%}[part=text3]{text-shadow:1px 1px 1px black}</style><svg part=svg fill=none>" +
                                [1, 2, 3, 4, 5].map((e) => t(e)).join("") +
                                `<g part=logo ><g stroke-width=4 stroke-linecap=round transform="rotate(${this.rod},15,15)">` +
                                `<line x1=26 y1=26 x2=33 y2=33 stroke=${this.text1fill} /><line x1=26 y1=26 x2=33 y2=33 stroke=${this.text1stroke} stroke-width=.5 />` +
                                `<circle stroke=${this.text1fill} part=circle cx=15 cy=15 r=12 />` +
                                `<circle stroke=${this.text1stroke} stroke-width=.5 cx=15 cy=15 r=14 /></g>` +
                                `<path stroke=${this.text1stroke} stroke-linecap=round d="m13.5 15.25h3m-4 2-2-2 2-2m5 4 2-2-2-2"><animateTransform type=rotate repeatCount=360 to=0,15,15 attributeName=transform from=360,15,15 dur=12 /></path><g>` +
                                t(6, "M15,15m-13,0a13,13,0,1,0,26,0a13,13,0,1,0,-26,0") +
                                "<animateTransform type=rotate repeatCount=360 to=0,15,15 attributeName=transform from=-360,15,15 dur=23 /></g></svg>"),
                            (this.width =
                                r("text1") +
                                r("circle") +
                                r("text2") +
                                ("Q" == this.text2[0] ? 20 : 30)),
                            s("svg").setAttribute(
                                "viewBox",
                                `0,0,${this.width},${this.height}`
                            ),
                            [1, 2, 3, 4, 5].map((t) =>
                                s("text" + t + "y").setAttribute(
                                    "d",
                                    `M0,${this["text" + t + "y"]}h` + this.width
                                )
                            ),
                            s("logo").setAttribute(
                                "transform",
                                `translate(${r("text1") + 10},0)`
                            ),
                            (this.to = 1);
                    }
                ) {
                    Object.keys(t).map((e) =>
                        Object.defineProperty(this, e, {
                            get: (s) => t[e],
                            set: (r) => ((t[e] = r), this.to && s()),
                        })
                    ),
                        (this.$ = t),
                        s();
                }
            }
        );
})();
