var t, e; t = document.currentScript.src, e = { txt1: "Web Components", txt2: "Questions", txt3: "<web-components-banner>", txt4: "", txt5: "Build Web Components, Learn Web Components", txt6: "shadowDOM-Custom Elements-templates".replaceAll("-", "&nbsp;".repeat(4)), width: 13, height: 140, rod: 90, txt1y: 75, txt2y: 75, txt3y: 130, txt4y: 130, txt5y: 28, txt1size: 80, txt2size: 80, txt3size: 35, txt4size: 35, txt5size: 13, txt6size: 14, durtag: 4, durlogo: 40, txt1fill: "#b8860b", txt2fill: "#b8860b", txt3fill: "#006400", txt4fill: "#ff6400", txt5fill: "#006400", txt6fill: "#eeeeee", txt1stroke: "#006400", txt2stroke: "#006400", txt1anchor: "start:1", txt2anchor: "end:99", txt3anchor: "start:1", txt4anchor: "end:99", txt5anchor: "start:24", txt6anchor: "start:0", repeattag: "once", repeatlogo: "indefinite" }, new URLSearchParams(location.search + "&" + t.split("?")[1]).forEach(((t, r) => e[r] = t)), customElements.define("web-components-banner", class extends HTMLElement { static observedAttributes = Object.keys(e); attributeChangedCallback(t, r, o) { this.do ? this[t] = o : e[t] = o } connectedCallback(t = (t = t => `var(--${t},${this[t]})`, e = (e, r = "M0,100h1100", o = "txt" + e, s = this[o].replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/_/g, " "), [i, a] = this[o + "anchor"].split(":")) => ("txt2" == o && "Q" == s[0] ? (this.rod = 0, s = s.slice(1)) : this.rod = this.rod || 90, `<path part=${o}y fill=none id=${o} pathLength=100 d=${r} /><text><textPath href=#${o} part=${o} font-size=${t(o + "size")} fill=${t(o + "fill")} stroke=${t(o + "stroke")} startoffset=${a} text-anchor=${i}>${s}</textPath></text>`), r = ({ type: t = "rotate", from: e = 360, to: r = 0, repeat: o, dur: s = 2 }) => `<animateTransform type=${t} attributeType=xml attributeName=transform additive=sum repeatCount=${o} dur=${s} from="${e + ("rotate" == t ? ",50,50" : 0)}" to="${r + ("rotate" == t ? ",50,50" : 0)}"/>`, o = t => this.shadowRoot.querySelector(`[part=${t}]`), s = t => ~~o(t).getBBox().width) => { this.do = 0, this.shadowRoot.innerHTML = "<style>:host{display:inline-block;width:100%}[part=txt3]{text-shadow:1px 1px 2px black}</style><svg part=svg><g>" + e(1) + e(2) + "<g part=logo>" + `<g stroke-width=14 stroke-linecap=round transform="rotate(${this.rod},50,50)">` + `<line x1=80 y1=80 x2=120 y2=120 stroke=${t("txt1fill")} />` + `<line x1=85 y1=85 x2=120 y2=120 stroke=${t("txt1stroke")} stroke-width=2 />` + `<circle part=circle fill=none cx=50 cy=50 r=41 stroke=${t("txt1fill")} />` + `<circle fill=none cx=50 cy=50 r=48 stroke=${t("txt1stroke")} stroke-width=1 /></g>` + `<path stroke-width=5 stroke=${t("txt1stroke")} stroke-linecap=round fill=none d="M40,50H60M35,60,25,50,35,40M65,60,75,50,65,40">` + r({ repeat: this.repeattag, dur: this.durtag, from: 180 }) + "</path><g>" + e(6, "M50,50m-45,0a45,45,0,1,0,90,0a45,45,0,1,0,-90,0") + r({ repeat: this.repeatlogo, dur: this.durlogo, from: -360 }) + "</g></g>" + e(3) + e(4) + e(5) + "</svg>", this.width = s("txt1") + s("circle") + s("txt2") + 75 + (this.rod ? 20 : 0), o("svg").setAttribute("viewBox", `0,0,${this.width},${this.height}`), [1, 2, 3, 4, 5].map((t => o("txt" + t + "y").setAttribute("d", `M0,${this["txt" + t + "y"]}h` + this.width))), o("logo").setAttribute("transform", `translate(${s("txt1") + 40},0)`), this.do = 1 }) { this.$ = Object.keys(e).map((r => Object.defineProperty(this, r, { get: t => e[r], set: o => (e[r] = o, this.do && t()) }))), this.attachShadow({ mode: "open" }), t() } });